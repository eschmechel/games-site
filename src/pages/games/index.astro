---
import Base from '../../layouts/Base.astro';
import ThemeToggle from '../../components/ui/ThemeToggle.astro';
import { games } from '../../utils/dataTypes';

const pageTitle = "Games";
const description = "All 20 games from the challenge - playable builds, downloads, and development notes";
const completedGames = games.filter(game => game.status === 'complete');
const inProgressGames = games.filter(game => game.status === 'in-progress');
const plannedGames = games.filter(game => game.status === 'planned');
---

<Base title={pageTitle} description={description}>
  <style>
    a {
      color: inherit;
      text-decoration: none;
      border-bottom: 1px solid currentColor;
    }
    a.pill, a.card { border-bottom: 0; }

    header, main, footer {
      max-width: 960px;
      margin: 0 auto;
      padding: 16px;
    }
    nav {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 12px;
    }
    .nav-links {
      display: flex;
      align-items: center;
      gap: 8px;
      flex-wrap: wrap;
    }

    .pill {
      display: inline-block;
      padding: 8px 12px;
      border: 2px solid var(--border);
      background: linear-gradient(180deg, var(--card), color-mix(in lab, var(--card) 88%, black));
      box-shadow:
        0 1px 0 #00000040,
        inset 0 1px 0 #ffffff0d;
      border-radius: 6px;
      transition: transform .12s ease, background .2s ease, box-shadow .2s ease;
    }
    .pill:hover {
      transform: translateY(-1px);
      box-shadow:
        0 2px 0 #00000040,
        inset 0 1px 0 #ffffff12;
    }

    .hero {
      position: relative;
      border: 2px solid var(--border);
      background: var(--card);
      padding: 18px;
      margin: 20px 0;
      border-radius: 10px;
      background-image: var(--grad-hero);
      background-blend-mode: screen;
      overflow: hidden;
    }
    .hero::before {
      content: "";
      position: absolute;
      inset: 0;
      pointer-events: none;
      border-radius: inherit;
      box-shadow: inset 0 0 0 1px #ffffff0f;
    }

    .section-header {
      display: flex;
      align-items: center;
      gap: 12px;
      margin: 32px 0 16px;
    }
    .section-header h2 {
      margin: 0;
      letter-spacing: .5px;
      text-shadow: 0 1px 0 rgba(0,0,0,.15);
    }
    .status-badge {
      font-size: 0.85em;
      padding: 4px 8px;
      border-radius: 4px;
      background: var(--grad-accent);
      color: var(--bg);
      font-weight: 600;
    }

    .grid {
      display: grid;
      gap: 12px;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      margin-bottom: 24px;
    }

    .card {
      padding: 16px;
      border: 2px solid var(--border);
      background: linear-gradient(180deg, var(--card), color-mix(in lab, var(--card) 86%, black));
      border-radius: 8px;
      position: relative;
      transition: transform .12s ease, border-color .2s ease, box-shadow .2s ease;
    }
    .card::after {
      content: "";
      position: absolute;
      left: 0; right: 0; top: 0;
      height: 3px;
      background: var(--grad-accent);
      opacity: .5;
      border-top-left-radius: 6px;
      border-top-right-radius: 6px;
    }
    .card:hover {
      transform: translateY(-2px);
      border-color: color-mix(in lab, var(--border), var(--accent-cyan) 35%);
      box-shadow: 0 6px 16px #00000040;
    }

    .card h3 {
      margin: 0 0 8px;
      letter-spacing: .5px;
    }
    .card p {
      margin: 8px 0;
      color: var(--fg-muted);
      line-height: 1.4;
    }
    .card-meta {
      font-size: 0.9em;
      color: var(--fg-muted);
      margin-top: 12px;
      display: flex;
      gap: 16px;
      flex-wrap: wrap;
    }
    .card-meta span {
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .empty-state {
      text-align: center;
      padding: 32px 16px;
      color: var(--fg-muted);
      font-style: italic;
    }

    .muted { color: var(--fg-muted); }

    footer {
      opacity: 0.85;
      border-top: 1px dashed color-mix(in lab, var(--border), white 8%);
      margin-top: 48px;
    }
  </style>

  <header>
    <nav>
      <div class="nav-links">
        <a href="/" class="pill">20 Games</a>
        <a href="/games" class="pill">Games</a>
        <a href="/blog" class="pill">Blog</a>
        <a href="/about" class="pill">About</a>
      </div>
      <ThemeToggle />
    </nav>
  </header>

  <main>
    <section class="hero">
      <h1 style="margin:0;">Game Collection</h1>
      <p class="muted">
        All games from the 20 Games Challenge. Play online, download builds, and read development notes.
      </p>
      <p><strong>Progress:</strong> {completedGames.length} complete, {inProgressGames.length} in progress, {plannedGames.length} planned</p>
    </section>

    {completedGames.length > 0 && (
      <>
        <div class="section-header">
          <h2>Completed Games</h2>
          <span class="status-badge">‚úì Complete</span>
        </div>
        <div class="grid">
          {completedGames.map(game => (
            <a href={game.filePath} class="card">
              <h3>{game.title}</h3>
              <p>{game.description}</p>
              <div class="card-meta">
                <span>üéÆ {game.engine}</span>
                <span>üìÖ {game.completedDate}</span>
                {game.webPlay && <span>üåê Playable</span>}
                {game.isDownloadable && <span>üíæ Downloadable</span>}
              </div>
            </a>
          ))}
        </div>
      </>
    )}

    {inProgressGames.length > 0 && (
      <>
        <div class="section-header">
          <h2>In Progress</h2>
          <span class="status-badge">üöß WIP</span>
        </div>
        <div class="grid">
          {inProgressGames.map(game => (
            <a href={game.filePath} class="card">
              <h3>{game.title}</h3>
              <p>{game.description}</p>
              <div class="card-meta">
                <span>üéÆ {game.engine}</span>
                <span>üöß In development</span>
              </div>
            </a>
          ))}
        </div>
      </>
    )}

    {plannedGames.length > 0 && (
      <>
        <div class="section-header">
          <h2>Planned Games</h2>
          <span class="status-badge">üìã Planned</span>
        </div>
        <div class="grid">
          {plannedGames.map(game => (
            <div class="card" style="opacity: 0.7; cursor: default;">
              <h3>{game.title}</h3>
              <p>{game.description}</p>
              <div class="card-meta">
                <span>üéÆ {game.engine}</span>
                <span>üìã Coming soon</span>
              </div>
            </div>
          ))}
        </div>
      </>
    )}

    {games.length === 0 && (
      <div class="empty-state">
        <p>No games yet. Check back soon!</p>
      </div>
    )}
  </main>

  <footer>
    <p>Find me on <a href="https://github.com/username">GitHub</a> ¬∑ <a href="https://itch.io/profile">itch.io</a> ¬∑ <a href="/feed.xml">RSS</a></p>
  </footer>
</Base>
